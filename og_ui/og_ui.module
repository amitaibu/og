<?php

/**
 * @file
 * Main functions and hook implementations of the Organic Groups UI module.
 */

use Drupal\Core\Config\Entity\ConfigEntityBundleBase;
use Drupal\Core\Entity\BundleEntityFormBase;
use Drupal\Core\Entity\ContentEntityBase;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\og\GroupManager;
use Drupal\og\Og;
use Drupal\og\OgGroupAudienceHelper;
use Drupal\og_ui\BundleFormAlter;
use Drupal\og_ui\OgUi;
use Drupal\og_ui\OgUiAdminRouteInterface;

/**
 * Implements hook_form_alter().
 */
function og_ui_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  if ($form_state->getFormObject() instanceof BundleEntityFormBase) {
    (new BundleFormAlter($form_state->getFormObject()->getEntity()))
      ->formAlter($form, $form_state);
  }
}

/**
 * Implements hook_entity_insert().
 */
function og_ui_entity_insert(EntityInterface $entity) {
  og_ui_entity_type_save($entity);
}

/**
 * Implements hook_entity_update().
 */
function og_ui_entity_update(EntityInterface $entity) {
  og_ui_entity_type_save($entity);
}

/**
 * Helper to save group information.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity object.
 */
function og_ui_entity_type_save(EntityInterface $entity) {
  if (!$entity instanceof ConfigEntityBundleBase || !isset($entity->og_is_group)) {
    return;
  }

  $bundle = $entity->id();
  $definition = \Drupal::entityTypeManager()->getDefinition($entity->getEntityTypeId());
  $entity_type_id = $definition->getBundleOf();

  // Add/remove the group itself.
  $is_group = Og::isGroup($entity_type_id, $bundle);
  if ($entity->og_is_group != $is_group) {
    if ($entity->og_is_group) {
      Og::groupManager()->addGroup($entity_type_id, $bundle);
    }
    else {
      Og::groupManager()->removeGroup($entity_type_id, $bundle);
    }
  }

  // Add remove the relevant field.
  $is_group_content = Og::isGroupContent($entity_type_id, $bundle);
  if ($entity->og_group_content_bundle != $is_group_content) {
    if ($entity->og_group_content_bundle) {
      Og::createField(OgGroupAudienceHelper::DEFAULT_FIELD, $entity_type_id, $bundle);
    }
    elseif ($field = FieldConfig::loadByName($entity_type_id, $bundle, OgGroupAudienceHelper::DEFAULT_FIELD)) {
      $field->delete();
      return;
    }
  }

  // Change the field target type and bundle.
  if ($field_storage = FieldStorageConfig::loadByName($entity_type_id, OgGroupAudienceHelper::DEFAULT_FIELD)) {
    $target_type = $field_storage->getSetting('target_type');
    if (!empty($entity->og_target_type) && $entity->og_target_type !== $target_type) {
      // @todo It's probably not possible to change the field storage after the
      //   field has data. We should disable this option in the UI.
      $field_storage->setSetting('target_type', $entity->og_target_type);
      $field_storage->save();
    }
  }
  if ($field = FieldConfig::loadByName($entity_type_id, $bundle, OgGroupAudienceHelper::DEFAULT_FIELD)) {
    $handler_settings = $field->getSetting('handler_settings');
    if (!isset($handler_settings['target_bundles']) || $entity->og_target_bundles != $handler_settings['target_bundles']) {
      $handler_settings['target_bundles'] = $entity->og_target_bundles;
      $field->setSetting('handler_settings', $handler_settings);
      $field->save();
    }
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function og_ui_entity_type_alter(array &$entity_types) {
  // Not accessing to the config schema through the group manager proxy due to
  // circular reference caused by the fact we in hook_entity_type_alter().
  $config = \Drupal::config(GroupManager::SETTINGS_CONFIG_KEY)->get(GroupManager::GROUPS_CONFIG_KEY);

  $groups = !empty($config) ? $config : [];
  
  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  foreach ($entity_types as $entity_type_id => $entity_type) {

    if (empty($groups[$entity_type_id])) {
      continue;
    }

    // Adding the group manager causing for a circular dependency because the
    // group manager the the entity manager as a dependency.
    if ($entity_type_id != 'node') {
      continue;
    }

    $entity_type->setLinkTemplate('og-group-admin-pages', "/$entity_type_id/{{$entity_type_id}}/group");
  }

  $entity_types['og_membership']->setHandlerClass('views_data', 'Drupal\og_ui\OgMembershipViewsData');
}

/**
 * Implements hook_menu_local_actions_alter().
 */
function og_ui_menu_local_actions_alter(&$local_actions) {

  $plugins = OgUi::getGroupAdminPlugins();

  foreach ($plugins as $plugin) {

    $definition = $plugin->getPluginDefinition();

    foreach ($definition['parents_routes'] as $parent_route) {

      foreach ($plugin->getRoutes() as $sub_route => $route) {
        if ($sub_route == OgUiAdminRouteInterface::MAIN) {
          continue;
        }

        if (!empty($route['type']) && $route['type'] != 'local_action') {
          continue;
        }

        $base_route_id = $parent_route . '.' . $definition['route_id'];
        $route_id = $base_route_id . '.' . $sub_route;

        $local_actions[$route_id] = [
          'id' => $route_id,
          'title' => $route['title'],
          'route_name' => $route_id,
          'appears_on' => [$base_route_id . '.' . OgUiAdminRouteInterface::MAIN],
          'class' => '\Drupal\Core\Menu\LocalActionDefault',
          'weight' => 100,
          'options' => [],
        ];
      }
    }
  }
}
