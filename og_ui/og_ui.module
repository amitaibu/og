<?php
/**
 * @file
 * Main functions and hook implementations of the Organic Groups UI module.
 */

use Drupal\Component\Utility\Unicode;
use Drupal\Core\Config\Entity\ConfigEntityBundleBase;
use Drupal\Core\Entity\BundleEntityFormBase;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\field\Entity\FieldConfig;
use Drupal\field_ui\FieldUI;
use Drupal\og\Og;

/**
 * Implements hook_form_alter().
 */
function og_ui_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  if ($form_state->getFormObject() instanceof BundleEntityFormBase) {
    // This is an entity type, which of course, is an entity...
    /** @var \Drupal\Core\Entity\EntityInterface $entity */
    $entity = $form_state->getFormObject()->getEntity();
    // Example: article.
    $bundle = $entity->id();
    $definition = \Drupal::entityTypeManager()->getDefinition($entity->getEntityTypeId());
    // Example: node.
    $entity_type_id = $definition->getBundleOf();
    if (!$entity_type_id) {
      return;
    }
    $args = [
      // Example: Article.
      '%bundle' => Unicode::lcfirst($entity->label()),
    ];
    $form['og'] = array(
      '#type' => 'details',
      '#title' => t('Organic groups'),
      '#collapsible' => TRUE,
      '#group' => 'additional_settings',
      '#description' => t('Each "%bundle" may serve as a group, may belong to a group, or may not participate in OG at all.', $args),
    );
    $is_group = Og::isGroup($entity_type_id, $bundle);
    $description = t('Set "%bundle"to be a group, so other entities can be associated with it later, and can have group members.', $args);
    if ($is_group && \Drupal::moduleHandler()->moduleExists('field_ui')) {
      $link = Link::fromTextAndUrl(t('Manage fields'), FieldUI::getOverviewRouteInfo($entity_type_id, $bundle))->toRenderable();
      $args = ['@url' => render($link)];
      $description .= '<br/>' . t('To unset the group definition you should delete the "Group type" field via @url.', $args);
    }
    $form['og']['og_group_type'] = array(
      '#type' => 'checkbox',
      '#title' => t('Group'),
      '#default_value' => $is_group,
      '#description' => $description,
      '#disabled' => $is_group,
    );
    _og_ui_add_group_settings_elements($form, $entity_type_id, $bundle);

  }
}

/**
 * Add the group content checkbox, target entity type, bundle selects.
 *
 * @param array $form
 *   The form array to which to add the elements.
 * @param string $entity_type_id
 *   The entity type for which the form is being altered.
 * @param $bundle
 *   The entity bundle for which the form is being altered.
 */
function _og_ui_add_group_settings_elements(&$form, $entity_type_id, $bundle) {
  $is_group_content = Og::isGroupContent($entity_type_id, $bundle);

  $description = t('Set the content type to be a group content, that can be associated with groups.');
  if ($is_group_content && \Drupal::moduleHandler()->moduleExists('field_ui')) {
    $link = Link::fromTextAndUrl(t('Manage fields'), FieldUI::getOverviewRouteInfo($entity_type_id, $bundle))->toRenderable();
    $args = ['@url' => render($link)];
    $description .= '<br/>' . t('To unset the group content definition or change the settings you should delete the "Groups audience" field via @url.', $args);
  }

  $target_type_default = FALSE;
  $handler_settings = [];
  if ($field = FieldConfig::loadByName($entity_type_id, $bundle, OG_AUDIENCE_FIELD)) {
    $handler_settings = $field->getSetting('handler_settings');
    if (isset($handler_settings['target_type'])) {
      $target_type_default = $handler_settings['target_type'];
    }
  }

  $target_types = [];
  $bundle_options = [];
  $all_group_bundles = Og::groupManager()->getAllGroupBundles();
  foreach ($all_group_bundles as $group_entity_type => $bundles) {
    if (!$target_type_default) {
      $target_type_default = $group_entity_type;
    }
    $target_types[$group_entity_type] = \Drupal::entityTypeManager()
      ->getDefinition($group_entity_type)
      ->getLabel();
  }

  if ($all_group_bundles) {
    $bundle_info = \Drupal::service('entity_type.bundle.info')
      ->getBundleInfo($target_type_default);
    foreach ($all_group_bundles[$target_type_default] as $bundle_name) {
      $bundle_options[$bundle_name] = $bundle_info[$bundle_name]['label'];
    }
  }
  else {
    $description .= '<br/>' . t('There are no group bundles defined.');
  }

  $form['og']['og_group_content_bundle'] = array(
    '#type' => 'checkbox',
    '#title' => t('Group content'),
    '#default_value' => $is_group_content,
    '#description' => $description,
    '#disabled' => !$target_types || $is_group_content,
  );

  if ($target_types) {
    // Don't show the settings, as there might be multiple OG audience fields
    // in the same bundle.
    $form['og']['target_type'] = array(
      '#type' => 'select',
      '#title' => t('Target type'),
      '#options' => $target_types,
      '#default_value' => $target_type_default,
      '#description' => t('The entity type that can be referenced thru this field.'),
      '#ajax' => array(
        'callback' => 'og_ui_entity_type_form_settings',
        'wrapper' => 'og-settings-wrapper',
      ),
      '#states' => array(
        'visible' => array(
          ':input[name="og_group_content_bundle"]' => array('checked' => TRUE),
        ),
      ),
    );

    // Get the bundles that are acting as group.
    $form['og']['target_bundles'] = array(
      '#prefix' => '<div id="og-settings-wrapper">',
      '#suffix' => '</div>',
      '#type' => 'select',
      '#title' => t('Target bundles'),
      '#options' => $bundle_options,
      '#default_value' => isset($handler_settings['target_bundles']) ? $handler_settings['target_bundles'] : [],
      '#size' => 6,
      '#multiple' => TRUE,
      '#description' => t('The bundles of the entity type that can be referenced. Optional, leave empty for all bundles.'),
      '#states' => array(
        'visible' => array(
          ':input[name="og_group_content_bundle"]' => array('checked' => TRUE),
        ),
      ),
    );
  }
}

/**
 * AJAX callback to attach the message type fields to the form.
 *
 * Since the controlling logic for populating the form is in the form builder
 * function, all we do here is select the element and return it to be updated.
 */
function og_ui_entity_type_form_settings(array $form, array &$form_state) {
  return $form['og']['target_bundles'];
}

/**
 * Implements hook_entity_insert().
 */
function og_ui_entity_insert(EntityInterface $entity) {
  og_ui_entity_type_save($entity);
}

/**
 * Implements hook_entity_insert().
 */
function og_ui_entity_update(EntityInterface $entity) {
  og_ui_entity_type_save($entity);
}

function og_ui_entity_type_save(EntityInterface $entity) {
  if (!$entity instanceof ConfigEntityBundleBase || !isset($entity->og_group_type) || !isset($entity->og_group_content_bundle)) {
    return;
  }
  $bundle = $entity->id();
  $definition = \Drupal::entityTypeManager()->getDefinition($entity->getEntityTypeId());
  $entity_type_id = $definition->getBundleOf();
  $is_group = Og::isGroup($entity_type_id, $bundle);
  if ($entity->og_group_type != $is_group) {
    if ($entity->og_group_type) {
      Og::groupManager()->addGroup($entity_type_id, $bundle);
    }
    else {
      Og::groupManager()->removeGroup($entity_type_id, $bundle);
    }
  }
  $is_group_content = Og::isGroupContent($entity_type_id, $bundle);
  if ($entity->og_group_content_bundle != $is_group_content) {
    if ($entity->og_group_content_bundle) {
      Og::createField($entity_type_id, $bundle);
    }
    elseif ($field = FieldConfig::loadByName($entity_type_id, $bundle, OG_AUDIENCE_FIELD)) {
      $field->delete();
      return;
    }
  }
  if ($field = FieldConfig::loadByName($entity_type_id, $bundle, OG_AUDIENCE_FIELD)) {
    $handler_settings = $field->getSetting('handler_settings');
    $save = FALSE;
    foreach (['target_type', 'target_bundles'] as $key) {
      if (!isset($handler_settings[$key]) || $entity->$key != $handler_settings[$key]) {
        $handler_settings[$key] = $entity->$key;
        $field->setSetting('handler_settings', $handler_settings);
        $save = TRUE;
      }
    }
    if ($save) {
      $field->save();
    }
  }
}
